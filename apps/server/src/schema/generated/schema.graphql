type Ad {
  adAccount: AdAccount!
  adAccountId: String!
  creative: Creative
  creativeId: String
  externalId: String!
  id: ID!
  insights(
    after: String
    before: String
    dateFrom: Date
    dateTo: Date
    devices: [DeviceEnum!]
    first: Int
    highestFirst: Boolean = true
    last: Int
    orderBy: InsightsColumnsOrderBy! = cpm_rel
    positions: [String!]
    publishers: [PublisherEnum!]
  ): AdInsightsConnection!
  name: String
}

type AdAccount {
  adAccountIntegrations: [AdAccountIntegration!]!
  adCount: Int!
  advertisements(after: String, before: String, first: Int, last: Int): AdAccountAdvertisementsConnection!
  createdAt: Date!
  currency: CurrencyEnum!
  externalId: String!
  id: ID!
  insights: [Insight!]!

  """
  Whether the ad account is connected to the current organization
  """
  isConnectedToCurrentOrg: Boolean!
  lastSyncedAt: Date
  name: String!
  organizations: [Organization!]!
  type: IntegrationType!
  updatedAt: Date!
}

type AdAccountAdvertisementsConnection {
  edges: [AdAccountAdvertisementsConnectionEdge]!
  pageInfo: PageInfo!
}

type AdAccountAdvertisementsConnectionEdge {
  cursor: String!
  node: Ad!
}

type AdAccountIntegration {
  adAccount: AdAccount!
  adAccountId: String!
  enabled: Boolean!
  integration: Integration!
  integrationId: String!
}

type AdInsightsConnection {
  edges: [AdInsightsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AdInsightsConnectionEdge {
  cursor: String!
  node: Insight!
}

enum AllRoles {
  ADMIN
  ORG_ADMIN
  ORG_OPERATOR
  ORG_MEMBER
}

type BaseError implements Error {
  message: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type ChannelInitialProgressPayload {
  channel: IntegrationType!
  progress: Float!
}

type Comment {
  body: String!
  createdAt: Date!
  creative: Creative!
  creativeId: ID!
  id: ID!
  taggedUsers: [User!]!
  updatedAt: Date!
  user: User!
  userId: ID!
}

type Creative {
  adAccount: AdAccount!
  adAccountId: String!
  ads: [Ad!]!
  body: String
  callToActionType: String
  comments: [Comment!]!
  createdAt: Date!
  externalId: String!
  id: ID!
  imageUrl: String
  name: String!
  status: String
  title: String
  updatedAt: Date!
}

enum CurrencyEnum {
  AFN
  ALL
  DZD
  USD
  EUR
  AOA
  XCD
  ARS
  AMD
  AWG
  AUD
  AZN
  BSD
  BHD
  BDT
  BBD
  BYN
  BZD
  XOF
  BMD
  BTN
  INR
  BOB
  BOV
  BAM
  BWP
  NOK
  BRL
  BND
  BGN
  BIF
  CVE
  KHR
  XAF
  CAD
  KYD
  CLF
  CLP
  CNY
  COP
  COU
  KMF
  CDF
  NZD
  CRC
  CUC
  CUP
  ANG
  CZK
  DKK
  DJF
  DOP
  EGP
  SVC
  ERN
  ETB
  FKP
  FJD
  XPF
  GMD
  GEL
  GHS
  GIP
  GTQ
  GBP
  GNF
  GYD
  HTG
  HNL
  HKD
  HUF
  ISK
  IDR
  XDR
  IRR
  IQD
  ILS
  JMD
  JPY
  JOD
  KZT
  KES
  KPW
  KRW
  KWD
  KGS
  LAK
  LBP
  LSL
  ZAR
  LRD
  LYD
  CHF
  MOP
  MGA
  MWK
  MYR
  MVR
  MRU
  MUR
  XUA
  MXN
  MXV
  MDL
  MNT
  MAD
  MZN
  MMK
  NAD
  NPR
  NIO
  NGN
  OMR
  PKR
  PAB
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  MKD
  RON
  RUB
  RWF
  SHP
  WST
  STN
  SAR
  RSD
  SCR
  SLE
  SGD
  XSU
  SBD
  SOS
  SSP
  LKR
  SDG
  SRD
  SZL
  SEK
  CHE
  CHW
  SYP
  TWD
  TJS
  TZS
  THB
  TOP
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  USN
  UYI
  UYU
  UZS
  VUV
  VEF
  VED
  VND
  YER
  ZMW
  ZWL
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

enum DeviceEnum {
  MobileWeb
  MobileApp
  Desktop
  ConnectedTv
  Tablet
  Unknown
}

interface Error {
  message: String!
}

type Feedback {
  createdAt: Date!
  currentOrganization: Organization
  currentOrganizationId: ID
  message: String!
  type: FeedbackTypeEnum!
  user: User!
  userId: ID!
}

enum FeedbackTypeEnum {
  BUG_REPORT
  FEATURE_SUGGESTION
  OTHER
}

input FilterInsightsInput {
  adAccountIds: [String!]
  adIds: [String!]
  creativeIds: [String!]
  dateFrom: Date
  dateTo: Date
  devices: [DeviceEnum!]
  groupBy: [InsightsColumnsGroupBy!]
  integrations: [IntegrationType!]
  interval: InsightsInterval!

  """
  The maximum threshold in the orderBy column. Last datapoint is taken into account. For example if orderBy is impressions and the threshold is 900, then only the insights that had at most 900 impression on the last datapoint will show up.
  """
  maxThreshold: Int

  """
  The minimum threshold in the orderBy column. Last datapoint is taken into account. For example if orderBy is impressions and the threshold is 100, then only the insights that had at least 100 impression on the last datapoint will show up.
  """
  minThreshold: Int
  order: OrderBy = desc
  orderBy: InsightsColumnsOrderBy! = cpm_rel

  """
  Starting at 1
  """
  page: Int! = 1
  pageSize: Int! = 12
  positions: [InsightsPosition!]
  publishers: [PublisherEnum!]
  search: InsightsSearchExpression
}

type GenerateGoogleAuthUrlResponse {
  type: LoginProviderEnum!
  url: String!
}

type GroupedInsight {
  adAccountId: String
  adAccountName: String
  adId: String
  adName: String
  adSetId: String
  adSetName: String
  campaignId: String
  campaignName: String
  creativeId: String
  creativeName: String
  currency: CurrencyEnum!
  datapoints: [InsightsDatapoints!]!
  device: DeviceEnum
  iFrame: IFrame
  id: String!
  integration: IntegrationType
  position: String
  publisher: PublisherEnum
}

type GroupedInsights implements Pagination {
  edges: [GroupedInsight!]!
  hasNext: Boolean!
  page: Int!
  pageSize: Int!
}

type IFrame {
  height: Int!
  src: String!
  type: IFrameType!
  width: Int!
}

enum IFrameType {
  IFRAME
  EMBEDDED
}

type Insight {
  ad: Ad!
  adId: String!
  date: Date!
  device: DeviceEnum!
  id: ID!
  impressions: BigInt!
  position: String!
  publisher: PublisherEnum!

  """
  Amount of money spent on the ad in cents
  """
  spend: BigInt!
}

enum InsightsColumnsGroupBy {
  adAccountId
  adId
  adSetId
  campaignId
  creativeId
  device
  position
  publisher
  integration
}

enum InsightsColumnsOrderBy {
  spend_abs
  impressions_abs
  cpm_abs
  spend_rel
  impressions_rel
  cpm_rel
  clicks_abs
  clicks_rel
  cpc_abs
  cpc_rel
}

type InsightsDatapoints {
  clicks: BigInt
  cpc: Float
  cpm: Float
  date: Date!
  impressions: BigInt!

  """
  In Cents
  """
  spend: BigInt!

  """
  In Cents
  """
  spendUsd: BigInt
}

input InsightsDatapointsInput {
  adAccountId: String
  adId: String
  adSetId: String
  campaignId: String
  dateFrom: Date!
  dateTo: Date!
  device: DeviceEnum
  interval: InsightsInterval!
  position: InsightsPosition
  publisher: PublisherEnum
}

enum InsightsInterval {
  day
  week
  month
  quarter
}

enum InsightsOrderBy {
  MobileWeb
  MobileApp
  Desktop
  ConnectedTv
  Tablet
  Unknown
}

enum InsightsPosition {
  an_classic
  biz_disco_feed
  facebook_reels
  facebook_reels_overlay
  facebook_stories
  feed
  instagram_explore
  instagram_explore_grid_home
  instagram_profile_feed
  instagram_reels
  instagram_search
  instagram_stories
  instream_video
  marketplace
  messenger_inbox
  messenger_stories
  rewarded_video
  right_hand_column
  search
  video_feeds
  unknown
}

input InsightsSearchExpression {
  and: [InsightsSearchExpression!]
  or: [InsightsSearchExpression!]
  term: InsightsSearchTerm
}

enum InsightsSearchField {
  AdName
  AccountName
  AdSetName
  CampaignName
}

enum InsightsSearchOperator {
  Contains
  NotContains
  StartsWith
  Equals
  NotEquals
}

input InsightsSearchTerm {
  field: InsightsSearchField!
  operator: InsightsSearchOperator!
  value: String!
}

type Integration {
  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  accessTokenExpiresAt: Date

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  adAccountIntegrations(onlyEnabled: Boolean): [AdAccountIntegration!]!

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  createdAt: Date!
  externalId: String

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  id: ID!

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  lastSyncedAt: Date
  organization: Organization!
  organizationId: String!

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  refreshTokenExpiresAt: Date

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  status: IntegrationStatus!

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  type: IntegrationType!

  """
  Caller is permitted to view this field if they are in an offspring organization
  """
  updatedAt: Date!
}

type IntegrationListItem {
  authUrl: String
  status: IntegrationStatus!
  type: IntegrationType!
}

type IntegrationStatsUpdateEvent {
  id: String!
  status: IntegrationStatus!
}

enum IntegrationStatus {
  ComingSoon
  Connected
  Errored
  Expired
  Expiring
  NotConnected
  Revoked
}

enum IntegrationType {
  META
  TIKTOK
  LINKEDIN
  GOOGLE
  SNAPCHAT
  REDDIT
}

type InviteLinks {
  role: OrganizationRoleEnum!
  url: String!
}

type InviteUsersError {
  email: String!
  message: String!
}

type InviteUsersErrors implements Error {
  error: [InviteUsersError!]!
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LandingPageSupportMessage {
  email: String!
  fullName: String!
  id: ID!
  message: String!
  phone: String
  subject: String!
}

input LandingPageSupportMessageInput {
  email: String!
  fullName: String!
  message: String!
  phone: String
  subject: String!
}

enum LoginProviderEnum {
  GOOGLE
}

type MetaError implements Error {
  code: Int!
  errorSubCode: Int!
  fbTraceId: String!
  message: String!
}

enum Milestones {
  Onboarding
}

type Mutation {
  """
  Use this mutation after the user has clicked on the non-personalized invite link and they have an account already
  """
  acceptLinkInvitationExistingUser(inviteHash: String!): Tokens!

  """
  Creates a link for the signed in org for a specific role
  """
  createInvitationLink(role: OrganizationRoleEnum!): String!
  createOrganization(
    name: String!

    """
    Users should already be active in the parent organization (if there is a parent). This list should not include the caller, the caller will automatically be added as administrator.
    """
    users: [UserRolesInput!]
  ): Organization!
  deAuthIntegration(type: IntegrationType!): MutationDeAuthIntegrationResult!
  deleteComment(commentId: String!): Comment!

  """
  Deletes the invitation link for the given role
  """
  deleteInvitationLink(role: OrganizationRoleEnum!): Boolean!
  deleteOrganization(organizationId: String): Organization!
  deleteSearchQueryString(id: String!): SearchQueryString!
  emulateAdmin(organizationId: String!): Tokens!
  fillCreatives(integrationIds: [String!]): Boolean!
  forgetPassword(email: String!): Boolean!
  inviteUsers(emails: [String!]!, role: OrganizationRoleEnum!): MutationInviteUsersResult!
  login(email: String!, password: String!, token: String): Tokens!
  markAllNotificationsAsRead: Boolean!
  markNotificationAsRead(notificationId: String!): Boolean!
  refreshData(initial: Boolean!, integrationIds: [String!]): Boolean!
  removeUserFromOrganization(userId: String!): Boolean!
  removeUserMilestone(milestone: Milestones!): Tokens!
  resendEmailConfirmation: Boolean!
  resetPassword(password: String!, token: String!): Tokens!
  sendFeedback(message: String!, type: FeedbackTypeEnum!): Feedback!
  sendLandingPageSupportMessage(args: LandingPageSupportMessageInput!): LandingPageSupportMessage!

  """
  Use this mutation after the user has clicked on the personalized invite link on their email and they don't have an account yet
  """
  signUpInvitedUser(firstName: String!, inviteHash: String!, lastName: String!, password: String!): Tokens!
  signup(args: SignUpInput!): Tokens!
  subscribeNewsletter(email: String!): NewsletterSubscription!
  switchOrganization(organizationId: String!): Tokens!
  switchTiers(organizationId: String!, tier: Tier!): Organization!
  test: Boolean!
  updateIntegrationAdAccounts(adAccountIds: [String!]!, integrationId: String!): [AdAccountIntegration!]!
  updateOrganization(name: String!): Organization!
  updateOrganizationAdAccounts(adAccountIds: [String!]!, integrationType: IntegrationType!): Organization!
  updateOrganizationUser(role: OrganizationRoleEnum, userId: String!): UserOrganization!
  updateUser(firstName: String, lastName: String, newPassword: String, oldPassword: String): User!
  upsertComment(
    body: String!
    commentToUpdateId: String
    creativeId: String!
    taggedUsersIds: [String!]! = []
  ): Comment!
  upsertSearchQueryString(id: String, isOrganization: Boolean!, name: String!, queryString: String!): SearchQueryString!
}

union MutationDeAuthIntegrationResult = BaseError | MetaError | MutationDeAuthIntegrationSuccess

type MutationDeAuthIntegrationSuccess {
  data: String!
}

union MutationInviteUsersResult = InviteUsersErrors | MutationInviteUsersSuccess

type MutationInviteUsersSuccess {
  data: Boolean!
}

type NewIntegrationEvent {
  id: String!
  type: IntegrationType!
}

type NewsletterSubscription {
  email: String!
  id: ID!
}

type Notification {
  createdAt: Date!

  """
  [NewCommentNotificationExtraData]
  """
  extraData: JSON
  id: ID!
  isRead: Boolean!
  receivingUser: User!
  receivingUserId: ID!
  type: NotificationTypeEnum!
}

type NotificationEventPayload {
  createdAt: Date!
  extraData: JSON
  id: ID!
  isRead: Boolean!
  receivingUserId: ID!
  type: NotificationTypeEnum!
}

enum NotificationTypeEnum {
  COMMENT_MENTION
  NEW_INTEGRATION
}

enum OrderBy {
  asc
  desc
}

type Organization {
  adAccounts: [AdAccount!]!
  createdAt: Date!
  domain: String
  id: ID!
  integrations: [Integration!]!
  isRoot: Boolean!
  name: String!
  parentId: String
  tier: Tier!
  updatedAt: Date!
  userOrganizations: [UserOrganization!]!
}

enum OrganizationRoleEnum {
  """
  Ability to manage organization settings, integrations and members
  """
  ORG_ADMIN

  """
  Ability to manage organization settings and members.
  """
  ORG_OPERATOR

  """
  Does not have any special permissions
  """
  ORG_MEMBER
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

interface Pagination {
  hasNext: Boolean!
  page: Int!
  pageSize: Int!
}

type PrismaClientKnownRequestError implements Error {
  code: String!
  message: String!
}

enum PublisherEnum {
  Facebook
  Instagram
  Messenger
  AudienceNetwork
  LinkedIn
  TikTok
  GlobalAppBundle
  Pangle
  Google
  Unknown
}

type Query {
  """
  Return all the adAccounts for that are available on the parent organization. If this is the root organization then it returns all the addAccounts of this channel.
  """
  availableOrganizationAdAccounts(channel: IntegrationType!): [AdAccount!]!
  checkConfirmInvitedUserHashValidity(invitedHash: String!): Boolean!
  comments(after: String, before: String, creativeId: String!, first: Int, last: Int): QueryCommentsConnection!
  insightDatapoints(args: InsightsDatapointsInput!): [InsightsDatapoints!]!
  insightIFrame(adId: String!, device: DeviceEnum, position: String, publisher: PublisherEnum): IFrame
  insights(filter: FilterInsightsInput!): GroupedInsights!
  integrations(type: IntegrationType): [Integration!]!

  """
  Returns the invitation links for the signed in org
  """
  inviteLinks: [InviteLinks!]!
  lastThreeMonthsAds: [Ad!]!
  loginProviders(inviteHash: String): [GenerateGoogleAuthUrlResponse!]!
  me: User!
  notifications(after: String, before: String, first: Int, last: Int): QueryNotificationsConnection!
  organization: Organization!

  """
  Return the adAccounts for a channel that are associated with the organization.
  """
  organizationAdAccounts(channel: IntegrationType!): [AdAccount!]!
  organizations: [Organization!]!

  """
  Uses the refresh token to generate a new token
  """
  refreshToken: String!
  searchQueryStrings: [SearchQueryString!]!
  settingsChannels: [IntegrationListItem!]!
}

type QueryCommentsConnection {
  edges: [QueryCommentsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryCommentsConnectionEdge {
  cursor: String!
  node: Comment!
}

type QueryNotificationsConnection {
  edges: [QueryNotificationsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryNotificationsConnectionEdge {
  cursor: String!
  node: Notification!
}

type SearchQueryString {
  createdAt: Date!
  id: ID!
  isOrganization: Boolean!
  name: String!
  parentId: String!
  queryString: String!
  updatedAt: Date!
}

input SignUpInput {
  email: String!
  firstName: String!
  inviteHash: String
  lastName: String!
  password: String!
}

type Subscription {
  channelInitialSetupProgress: ChannelInitialProgressPayload!
  integrationUpdateStatus: IntegrationStatsUpdateEvent!
  newIntegration: NewIntegrationEvent!
  newNotification: NotificationEventPayload!
}

enum Tier {
  Launch
  Build
  Grow
  Scale
}

type TokenDto {
  refreshToken: String!
  token: String!
  user: User!
}

type Tokens {
  refreshToken: String!
  token: String!
}

"""
Caller is permitted to view this type if is the user or an admin. Some fields are also permitted if the caller and the user are in a common organization
"""
type User {
  allRoles: [AllRoles!]!
  comments: [Comment!]!
  createdAt: Date!
  currentOrganization: Organization
  currentOrganizationId: String

  """
  Caller is permitted to view this field if they are in a common organization
  """
  email: String!

  """
  Caller is permitted to view this field if they are in a common organization
  """
  firstName: String!

  """
  Caller is permitted to view this field if they are in a common organization
  """
  id: ID!

  """
  Caller is permitted to view this field if they are in a common organization
  """
  lastName: String!
  milestones: [Milestones!]!
  notifications(after: String, before: String, first: Int, last: Int): UserNotificationsConnection
  organizations: [UserOrganization!]!

  """
  Caller is permitted to view this field if they are in a common organization
  """
  photoUrl: String
  status: UserStatus!
  taggedInComment: [Comment!]!
  updatedAt: Date!
  userRoles: [String!]!
}

type UserNotificationsConnection {
  edges: [UserNotificationsConnectionEdge]
  pageInfo: PageInfo!
}

type UserNotificationsConnectionEdge {
  cursor: String!
  node: Notification
}

type UserOrganization {
  organization: Organization!
  organizationId: String!
  role: OrganizationRoleEnum!
  status: UserOrganizationStatus!
  user: User!
  userId: ID!
}

enum UserOrganizationStatus {
  ACTIVE
  INVITED
}

input UserRolesInput {
  role: OrganizationRoleEnum!
  userId: String!
}

enum UserStatus {
  EMAIL_UNCONFIRMED
  EMAIL_CONFIRMED
}

type ZodError implements Error {
  fieldErrors: [ZodFieldError!]!
  message: String!
}

type ZodFieldError {
  message: String!
  path: [String!]!
}
