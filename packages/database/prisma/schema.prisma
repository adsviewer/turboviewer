// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "tracing"]
  output          = "../.prisma"
}

generator json {
  provider = "prisma-json-types-generator"
}

generator pothos {
  provider = "prisma-pothos-types"
}

enum Tier {
  Launch
  Build
  Grow
  Scale
}

model Organization {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  randomString  String    @default(cuid())
  domain        String?   @unique
  parentId      String?   @map("parent_id")
  tier          Tier
  tierChangedAt DateTime? @map("tier_changed_at")

  integrations    Integration[]
  users           UserOrganization[]
  currentOrgUsers User[]
  parent          Organization?      @relation("children", fields: [parentId], references: [id])
  children        Organization[]     @relation("children")
  adAccounts      AdAccount[]
  feedbacks       Feedback[]

  @@map("organizations")
}

enum EmailType {
  PERSONAL
  WORK
}

enum UserStatus {
  EMAIL_UNCONFIRMED
  EMAIL_CONFIRMED
}

enum MilestoneEnum {
  Onboarding
}

model User {
  id                    String          @id @default(cuid())
  firstName             String          @map("first_name")
  lastName              String          @map("last_name")
  email                 String          @unique @db.Citext
  emailType             EmailType       @map("email_type")
  password              String?
  photoUrl              String?         @map("photo_url")
  currentOrganizationId String?         @map("current_organization_id")
  status                UserStatus
  milestones            MilestoneEnum[] @default([Onboarding])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  currentOrganization Organization? @relation(fields: [currentOrganizationId], references: [id])

  feedbacks       Feedback[]
  loginProviders  LoginProviderUser[]
  organizations   UserOrganization[]
  roles           UserRole[]
  comments        Comment[]
  taggedInComment Comment[]           @relation(name: "COMMENT_TAGGED_USERS")

  @@index([currentOrganizationId])
  @@map("users")
}

enum FeedbackTypeEnum {
  BUG_REPORT
  FEATURE_SUGGESTION
  OTHER
}

model Feedback {
  id                    String           @id @default(cuid())
  user                  User             @relation(fields: [userId], references: [id])
  userId                String           @map("user_id")
  type                  FeedbackTypeEnum
  message               String
  createdAt             DateTime         @default(now()) @map("created_at")
  currentOrganizationId String?          @map("current_organization_id")

  currentOrganization Organization? @relation(fields: [currentOrganizationId], references: [id])

  @@map("feedbacks")
}

enum LoginProviderEnum {
  GOOGLE
}

model LoginProviderUser {
  id         String            @id @default(cuid())
  externalId String            @map("user_id")
  provider   LoginProviderEnum

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@unique([id, provider])
  @@unique([externalId, provider])
  @@map("login_provider_users")
}

enum RoleEnum {
  ADMIN
}

enum OrganizationRoleEnum {
  /// able to manage the organization
  ORG_ADMIN
  /// able to manage users in the organization
  ORG_OPERATOR
  ORG_MEMBER
}

model UserRole {
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  role      RoleEnum
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([userId, role])
  @@map("user_roles")
}

enum UserOrganizationStatus {
  ACTIVE
  INVITED
}

model UserOrganization {
  userId         String                 @map("user_id")
  organizationId String                 @map("organization_id")
  role           OrganizationRoleEnum
  status         UserOrganizationStatus

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@map("user_organizations")
}

enum IntegrationTypeEnum {
  META
  TIKTOK
  LINKEDIN
  GOOGLE
  SNAPCHAT
  REDDIT
}

enum IntegrationStatus {
  CONNECTED
  REVOKED
  ERRORED
}

model Integration {
  id             String @id @default(cuid())
  organizationId String @map("organization_id")

  type       IntegrationTypeEnum
  externalId String              @map("external_id")

  accessToken           String            @map("access_token")
  refreshToken          String?           @map("refresh_token")
  accessTokenExpiresAt  DateTime?         @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime?         @map("refresh_token_expires_at")
  status                IntegrationStatus

  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  lastSyncedAt DateTime? @map("last_synced_at")

  organization Organization @relation(fields: [organizationId], references: [id])
  adAccounts   AdAccount[]

  @@unique([organizationId, type])
  @@unique([externalId, type])
  @@map("integrations")
}

model AdAccount {
  id String @id @default(cuid())

  type         IntegrationTypeEnum
  externalId   String              @map("external_id")
  name         String
  currency     CurrencyEnum
  lastSyncedAt DateTime?           @map("last_synced_at")

  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  integrations   Integration[]
  advertisements Ad[]
  creatives      Creative[]
  insights       Insight[]
  organizations  Organization[]
  campaign       Campaign[]

  @@unique([externalId, type])
  @@index([name])
  @@map("ad_accounts")
}

model Campaign {
  id          String   @id @default(cuid())
  adAccountId String   @map("ad_account_id")
  externalId  String   @map("external_id")
  name        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  adAccount AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  adSets    AdSet[]

  @@unique([adAccountId, externalId])
  @@index([name])
  @@map("campaigns")
}

model AdSet {
  id         String   @id @default(cuid())
  campaignId String   @map("campaign_id")
  externalId String   @map("external_id")
  name       String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  ads        Ad[]

  @@unique([campaignId, externalId])
  @@index([name])
  @@map("ad_sets")
}

model Ad {
  id          String  @id @default(cuid())
  adAccountId String  @map("ad_account_id")
  adSetId     String? @map("ad_set_id")
  creativeId  String? @map("creative_id")

  externalId String    @map("external_id")
  name       String?
  adAccount  AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  insights   Insight[]
  creative   Creative? @relation(fields: [creativeId], references: [id])
  adSet      AdSet?    @relation(fields: [adSetId], references: [id])

  @@unique([adSetId, externalId])
  @@unique([adAccountId, externalId])
  @@index([creativeId])
  @@index([name])
  @@map("ads")
}

model LandingPageSupportMessage {
  id        String   @id @default(cuid())
  email     String   @db.Citext
  fullName  String   @map("full_name")
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("landing_page_support_messages")
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique @db.Citext
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("newsletter_subscriptions")
}

enum DeviceEnum {
  MobileWeb
  MobileApp
  Desktop
  Unknown
}

enum PublisherEnum {
  Facebook
  Instagram
  Messenger
  AudienceNetwork
  LinkedIn
  TikTok
  GlobalAppBundle
  Pangle
  Google
  Unknown
}

model Comment {
  id         String @id @default(cuid())
  creativeId String @map("creative_id")
  userId     String @map("user_id")

  body String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  taggedUsers User[]   @relation(name: "COMMENT_TAGGED_USERS")
  creative    Creative @relation(fields: [creativeId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([creativeId])
  @@index([userId])
  @@map("comments")
}

model Creative {
  id               String  @id @default(cuid())
  adAccountId      String  @map("ad_account_id")
  externalId       String  @map("external_id")
  name             String
  body             String?
  title            String?
  status           String?
  callToActionType String? @map("call_to_action_type")
  imageUrl         String? @map("image_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  ads       Ad[]
  adAccount AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@unique([externalId, adAccountId])
  @@map("creatives")
}

model Insight {
  id String @id @default(cuid())

  adAccountId String       @map("ad_account_id")
  currency    CurrencyEnum

  adId        String        @map("ad_id")
  date        DateTime
  impressions BigInt
  /// Amount of money spent on the ad in cents
  spend       BigInt
  /// Amount of money spent on the ad in Euro cents
  spendEur    BigInt?       @map("spend_eur")
  device      DeviceEnum
  publisher   PublisherEnum
  position    String
  clicks      BigInt?

  ad        Ad         @relation(fields: [adId], references: [id])
  adAccount AdAccount? @relation(fields: [adAccountId], references: [id], onDelete: Cascade)

  @@unique([adId, date, device, publisher, position])
  @@index([adAccountId, date])
  @@index([currency])
  @@index([date])
  @@index([impressions])
  @@index([spendEur])
  @@index([device])
  @@index([publisher])
  @@index([position])
  @@map("insights")
}

model SearchQueryString {
  id             String   @id @default(cuid())
  name           String
  queryString    String
  isOrganization Boolean  @map("is_organization")
  parentId       String   @map("parent_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([parentId, name])
  @@map("search_query_strings")
}

enum CurrencyEnum {
  AFN
  ALL
  DZD
  USD
  EUR
  AOA
  XCD
  ARS
  AMD
  AWG
  AUD
  AZN
  BSD
  BHD
  BDT
  BBD
  BYN
  BZD
  XOF
  BMD
  BTN
  INR
  BOB
  BOV
  BAM
  BWP
  NOK
  BRL
  BND
  BGN
  BIF
  CVE
  KHR
  XAF
  CAD
  KYD
  CLF
  CLP
  CNY
  COP
  COU
  KMF
  CDF
  NZD
  CRC
  CUC
  CUP
  ANG
  CZK
  DKK
  DJF
  DOP
  EGP
  SVC
  ERN
  ETB
  FKP
  FJD
  XPF
  GMD
  GEL
  GHS
  GIP
  GTQ
  GBP
  GNF
  GYD
  HTG
  HNL
  HKD
  HUF
  ISK
  IDR
  XDR
  IRR
  IQD
  ILS
  JMD
  JPY
  JOD
  KZT
  KES
  KPW
  KRW
  KWD
  KGS
  LAK
  LBP
  LSL
  ZAR
  LRD
  LYD
  CHF
  MOP
  MGA
  MWK
  MYR
  MVR
  MRU
  MUR
  XUA
  MXN
  MXV
  MDL
  MNT
  MAD
  MZN
  MMK
  NAD
  NPR
  NIO
  NGN
  OMR
  PKR
  PAB
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  MKD
  RON
  RUB
  RWF
  SHP
  WST
  STN
  SAR
  RSD
  SCR
  SLE
  SGD
  XSU
  SBD
  SOS
  SSP
  LKR
  SDG
  SRD
  SZL
  SEK
  CHE
  CHW
  SYP
  TWD
  TJS
  TZS
  THB
  TOP
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  USN
  UYI
  UYU
  UZS
  VUV
  VEF
  VED
  VND
  YER
  ZMW
  ZWL
}
